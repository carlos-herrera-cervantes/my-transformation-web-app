@page "/users/{UserId}/progress"
@inject IUserProgressService userProgressService

<div class="row">
    <Nav></Nav>
    <div>
        <UserProgressHeader></UserProgressHeader>
        <h2>User Progress</h2>
        <div>
            <InputSelect class="form-input" @bind-Value="selectedExercise">
                <option value="">@selectedExercise</option>
                @foreach (var exercise in exercises)
                {
                    <option value="@exercise.Key">@exercise.Value</option>
                }
            </InputSelect>
        </div>
        <div>
            @if (UserProgress is null)
            {
                <Loader></Loader>
            }
            else
            {
                <table class="fl-table">
                    <thead>
                        <tr>
                            <th>Exercise</th>
                            <th>Creation</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (UserProgress.Count() == 0)
                        {
                            <tr>
                                <td colspan="4">No data</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var progress in UserProgress)
                            {
                                <tr>
                                    <td>@progress.Exercise[0].Name</td>
                                    <td>@progress.Moment.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <NavLink href="@($"/users/{UserId}/progress/{progress.Id}")">
                                            <i class="fa fa-info-circle"></i> Detail
                                        </NavLink>
                                    </td>
                                    <td>
                                        <button class="form-button-destroy"
                                            @onclick="@(async () => await OnDeleteAsync(progress.Id))"><i
                                                class="fas fa-trash-alt"></i> Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; }

    private IEnumerable<UserEvolution> UserProgress = new List<UserEvolution>();

    private Pageable Pageable = new Pageable();

    private string selectedExercise = "Select an exercise";

    private Dictionary<string, string> exercises = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        UserProgress = await userProgressService.GetAllAsync(UserId, Pageable);

        foreach (var progress in UserProgress)
        {
            exercises.Add(progress.ExerciseId, progress.Exercise[0].Name);
        }

        await base.OnInitializedAsync();
    }

    private async Task OnDeleteAsync(string id)
    {
        await userProgressService.DeleteAsync(UserId, id);
        UserProgress = UserProgress.Where(e => e.Id != id);
        StateHasChanged();
    }
}
