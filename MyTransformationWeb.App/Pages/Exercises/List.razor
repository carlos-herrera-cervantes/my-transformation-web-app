@page "/exercises"
@inject IExerciseService exerciseService
@inject IPaginationService<Exercise> paginationService

<div class="row">
    <Nav></Nav>
    <div>
        <Header></Header>
        <h2>Exercises</h2>
        <div>
            <input class="form-input" type="text" placeholder="search exercise" @bind="selectedExercise" @oninput="OnTextChanged" />
        </div>
        <div class="history-box">
            @if (exercises is null)
            {
                <Loader></Loader>
            }
            else
            {
                <table class="fl-table">
                    <thead class="special-head">
                        <tr>
                            <th>Name</th>
                            <th>Creation</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (exercises.Count() == 0)
                        {
                            <tr>
                                <td colspan="4">No data</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var exercise in pages[currentPage])
                            {
                                <tr>
                                    <td>@exercise.Name</td>
                                    <td>@exercise.CreatedAt.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <NavLink href="@($"/exercises/{exercise.Id}")">
                                            <i class="fa fa-info-circle"></i> Detail
                                        </NavLink>
                                    </td>
                                    <td>
                                        <button class="form-button-destroy" @onclick="@(async () => await OnDeleteAsync(exercise.Id))"><i class="fas fa-trash-alt"></i> Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
        <div class="small-margin-top">
            <button class="extra-small-width form-button dark-background white-text" @onclick="PreviousPage">&#60;</button>
            <label>@currentPage</label>
            <button class="extra-small-width form-button dark-background white-text" @onclick="NextPage">&#62;</button>
        </div>
    </div>
</div>

@code {
    private IEnumerable<Exercise> exercises = new List<Exercise>();

    private IEnumerable<Exercise> backupExercises = new List<Exercise>();

    private Dictionary<int, IEnumerable<Exercise>> pages = new Dictionary<int, IEnumerable<Exercise>>();

    private int currentPage = 1;

    private int maxElementsByPage = 10;

    private string selectedExercise = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var queryResult = await exerciseService.GetAllAsync();

        exercises = queryResult;
        backupExercises = queryResult;
        pages = paginationService.GetPages(maxElementsByPage, exercises);

        await base.OnInitializedAsync();
    }

    private async Task OnDeleteAsync(string id)
    {
        await exerciseService.DeleteAsync(id);
        exercises = exercises.Where(e => e.Id != id);
        backupExercises = backupExercises.Where(e => e.Id != id);
        pages = paginationService.GetPages(maxElementsByPage, exercises);
        StateHasChanged();
    }

    private void OnTextChanged(ChangeEventArgs e)
    {
        var resp = backupExercises.Where(f => f.Name.ToLower().Contains(e.Value.ToString()));
        pages = paginationService.GetPages(maxElementsByPage, resp);
        StateHasChanged();
    }

    private void NextPage()
    {
        currentPage = paginationService.NextPage();
        StateHasChanged();
    }

    private void PreviousPage()
    {
        currentPage = paginationService.PreviousPage();
        StateHasChanged();
    }
}
