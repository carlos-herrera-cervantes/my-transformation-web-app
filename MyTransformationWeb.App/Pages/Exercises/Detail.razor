@page "/exercises/{id}"
@inject IExerciseService exerciseService
@inject NavigationManager NavigationManager

<div class="row">
    <Nav></Nav>
    <div>
        <Header></Header>
        <h2>Exercise detail</h2>
        <ErrorBoundary @ref="@errorBoundary">
            <ChildContent>
                @if (exercise is null)
                {
                    <Loader></Loader>
                }
                else
                {
                    <EditForm Model="exercise" OnValidSubmit="HandleValidSubmitAsync">
                        <div class="row-2">
                            <div>
                                <div>
                                    <label class="form-label" for="name">Name</label>
                                    <InputText class="form-input" type="text" placeholder="name" id="name"
                                        @bind-Value="exercise.Name" />
                                </div>
                                <div>
                                    <label class="form-label" for="muscle_groups">Muscle Groups</label>
                                    <textarea class="form-input" placeholder="muscle groups" id="muscle_groups"
                                        @bind="exercise.MuscleGroups" />
                                </div>
                                <div>
                                    <button class="form-button dark-background white-text" type="submit">Submit</button>
                                </div>
                            </div>
                            <div>
                                <div>
                                    <label class="form-label" for="created_at">Created At</label>
                                    <input class="form-input" type="text" id="created_at" @bind="exercise.CreatedAt"
                                        readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="updated_at">Updated At</label>
                                    <input class="form-input" type="text" id="updated_at" @bind="exercise.UpdatedAt"
                                        readonly />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </ChildContent>
            <ErrorContent Context="ex">
                <div class="box-error">
                    <p>@ex.Message</p>
                    <button class="form-button-error" @onclick="Recover"><i class="fas fa-undo-alt"></i></button>
                </div>
            </ErrorContent>
        </ErrorBoundary>
    </div>
</div>

@code {
    private Exercise exercise = null;

    protected ErrorBoundary errorBoundary = default;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        exercise = await exerciseService.GetAsync(Id);
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        using var multipartFormDataContent = new MultipartFormDataContent();
        multipartFormDataContent.Headers.ContentType.MediaType = "multipart/form-data";
        multipartFormDataContent.Add(new StringContent(exercise.Name), "Name");
        multipartFormDataContent.Add(new StringContent(exercise.MuscleGroups), "MuscleGroups");

        await exerciseService.UpdateAsync(Id, multipartFormDataContent);
        NavigationManager.NavigateTo("/exercises");
    }

    protected void Recover()
    {
        errorBoundary?.Recover();
    }
}
