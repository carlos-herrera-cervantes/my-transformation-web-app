@page "/users/{UserId}/consumptions/history/{Id}/detail"
@inject IConsumptionResultService consumptionResultService
@inject NavigationManager navigationManager

<div class="row">
    <Nav></Nav>
    <div>
        <ConsumptionHeader></ConsumptionHeader>
        <h2>History detail</h2>
        <ErrorBoundary @ref="@errorBoundary">
            <ChildContent>
                @if (consumptionResult is null)
                {
                    <Loader></Loader>
                }
                else
                {
                    <EditForm Model="consumptionResult" OnValidSubmit="HandleValidSubmitAsync">
                        <div class="row-2">
                            <div>
                                <div>
                                    <label class="form-label" for="calories">Calories (kcal)</label>
                                    <input class="form-input" type="text" id="calories" @bind="consumptionResult.Calories" readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="protein">Protein (gr)</label>
                                    <input class="form-input" type="text" id="protein" @bind="consumptionResult.Protein" readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="carbs">Carbs (gr)</label>
                                    <input class="form-input" type="text" id="carbs" @bind="consumptionResult.Carbs" readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="fats">Fats (gr)</label>
                                    <input class="form-input" type="text" id="fats" @bind="consumptionResult.Fats" readonly />
                                </div>
                                <div>
                                    <button class="form-button dark-background white-text" type="submit">Submit</button>
                                </div>
                            </div>
                            <div>
                                <div>
                                    <label class="form-label" for="moment">Moment</label>
                                    <input class="form-input" type="text" id="moment" @bind="consumptionResult.Moment" readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="comment">Comment</label>
                                    <textarea class="form-input" placeholder="Type something" id="comment" @bind="consumptionResult.Comment" />
                                </div>
                                <div>
                                    <label class="form-label" for="created_at">Created At</label>
                                    <input class="form-input" type="text" id="created_at" @bind="consumptionResult.CreatedAt" readonly />
                                </div>
                                <div>
                                    <label class="form-label" for="updated_ar">Updated At</label>
                                    <input class="form-input" type="text" id="updated_at" @bind="consumptionResult.UpdatedAt" readonly />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </ChildContent>
            <ErrorContent Context="ex">
                <div class="box-error">
                    <p>@ex.Message</p>
                    <button class="form-button-error" @onclick="Recover"><i class="fas fa-undo-alt"></i></button>
                </div>
            </ErrorContent>
        </ErrorBoundary>
    </div>
</div>

@code {
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string Id { get; set; }

    private ConsumptionResult consumptionResult = new();

    protected ErrorBoundary errorBoundary = default;

    protected override async Task OnInitializedAsync()
    {
        consumptionResult = await consumptionResultService.GetByIdAsync(UserId, Id);
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        await consumptionResultService.UpdateAsync(UserId, Id, consumptionResult);
        navigationManager.NavigateTo($"/users/{UserId}/consumptions/history");
    }

    protected void Recover()
    {
        errorBoundary?.Recover();
    }
}
